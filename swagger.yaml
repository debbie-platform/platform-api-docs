openapi: 3.0.1

info:
  title: Debbie Platform API Docs
  description:
    The Debbie APIs is a RESTful interface, allowing you to programmatically
    update, add and access your data in the platform. It provides predictable URLs
    for accessing resources, and uses built-in HTTP features to receive commands and
    return responses. This makes it easy to communicate with third party systems.
  contact:
    email: support@debbie.dk
  version: v0.1.0
  x-logo:
    url: https://debbie-platform.github.io/platform-api-docs/deb-logo.svg

externalDocs:
  description: Find out more about Debbie here
  url: https://debbie.dk

servers:
  - url: https://api.debbiecollect.com

tags:
  - name: Authorization
    description: Endpoints for interacting with authorization
  - name: Cases
    description: Endpoints for interacting with cases
  - name: Customers
    description: Endpoints for interacting with customers
  - name: Creditors
    description: Endpoints for interacting with creditors
  - name: Updates
    description: Endpoints for interacting with updates
  - name: Users
    description: Endpoints for interacting with updates
  - name: Files
    description: Endpoints for interacting with files
  - name: Case vouchers
    description: Endpoints for interacting with case vouchers
  - name: Links
    description: Endpoints for generating links
  - name: "Webhooks"
    description: "Debbie provides a range of webhooks. To try them out please visit Debbie Caseworker and navigate to Settings → Developers → Webhooks."
  - name: "Voucher Type Ids"
    description: |
      ### Principals:
      | Type | id |
      | --- | --- |
      | Invoice (Faktura)          | eb41e58e-fccf-419d-a771-cd5027fe6e87 |
      | Credit note (Kreditnota)       | ef2cdc50-230f-4046-b1af-0f9c498dddd3 |
      | Final statement (Opgørelse)        | 42385ae0-6846-425c-a793-8d47a3b190b5 |
      | On account invoice (Acontofaktura)    | 2d101b6e-74f9-4a4d-9f8e-c7abe2264da0 |
      | Loan (Gældsbrev)        | bf61f462-6d3c-42e8-a99a-852d4a664926 |

      ### Costs:
      | Type | id |
      | --- | --- |
      | Collection cost (Inkassoomkostning)        | 07960de4-303d-4793-92da-3a8cfd5da1a1 |
      | Collection fee (Inkassogebyr)             | 4c3ccbbf-0651-45b2-b37b-4fe736acfd7e |
      | Reminder fee (Rykkergebyr)              | 3e51bf87-3c8f-4dd5-abd5-69417d113c89 |
      | Compensation cost (Kompensationsgebyr)       | ed3e3d61-e1bc-4ee2-9166-adf2c41a2bbf |

      ### Interests:
      | Type | id |
      | --- | --- |
      | DK interest (Procesrente)               | ca4af363-9925-436c-83d6-23b3db6ed5d2 |
      | Fixed interest (Fastrente)                 | 299dc393-1b71-4950-860f-8fb485036722 |
      | Yearly interest (Årlig rente)               | 37db68dd-80be-40c7-8d2d-3619c793107f |

      ### Transactions:
      | Type | id |
      | --- | --- |
      | Deposit (Indbetaling)               | c51f2f6a-8081-45ef-b52d-5e0569fdf12e |

paths:
  /iam/auth/permissions:
    get:
      tags:
        - Authorization
      summary: Get permissions
      description: Scopes that the bearer token has access to
      operationId: get-auth-permissions

      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Permissions"
              example:
                scopes:
                  - "read:cases"
                  - "write:cases"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

  /collection-engine/v1/{tenantId}/cases:
    post:
      tags:
        - Cases
      summary: Create new case
      description: Create new case allows the api consumer to create new cases
      operationId: create-case
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant the case is being created for
      requestBody:
        description: New case object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCase"
            example:
              creditorId: 245ac5f9-2795-4a91-8201-cb762dc88f70
              isCompany: false
              currency: EUR
              customerId: a7fcf07c-74f2-40d9-8ea6-e67b07b14ca4
              caseVouchers:
                - referenceId: Fakt. 123456
                  voucherTypeId: eb41e58e-fccf-419d-a771-cd5027fe6e87
                  amount: -259900
                  source: "CREDITOR"
                  date: "2020-05-01 00:00:00.000+01"
                  dueDate: "2020-05-08 00:00:00.000+01"
                  referenceVouchers:
                    - interestStartDate: "2020-06-01 00:00:00.000+01"
                      amount: 0
                      source: "COLLECTOR"
                      voucherTypeId: ca4af363-9925-436c-83d6-23b3db6ed5d2
                      date: "2020-06-01 00:00:00.000+01"
                    - voucherTypeId: 3e51bf87-3c8f-4dd5-abd5-69417d113c89
                      amount: -10000
                      source: "CREDITOR"
                      date: "2020-05-28 00:00:00.000+01"
                    - voucherTypeId: 3e51bf87-3c8f-4dd5-abd5-69417d113c89
                      amount: -10000
                      source: "CREDITOR"
                      date: "2020-06-07 00:00:00.000+01"

        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaseCreated"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

  /collection-engine/v1/{tenantId}/cases/{id}:
    patch:
      tags:
        - Cases
      summary: Update a case
      description: Updates attributes of a case given the cases id
      operationId: update-case
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant the case belongs to
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Id the case to be updated
      requestBody:
        description: Update case object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCase"
            example:
              status: ENDED
              reason: PAID

        required: true
      responses:
        204:
          description: Successful operation
          content: {}
        401:
          $ref: "#/components/responses/UnauthorizedError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body
    get:
      tags:
        - Cases
      summary: Get a case
      description: Get a case by id
      operationId: get-case
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant the case belongs to
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the case to be retrieved
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCase"
              example:
                id: 123456
                caseId: 268b30d2-e895-42b9-8a38-2451a87e19b2
                status: PENDING
                statusTime: 2022-04-19T07:30:21.070Z
                exitReason: null
                createdAt: 2022-04-19T07:30:21.070Z
                creditorId: 29654f0c-d424-41e4-9eec-85bef089eaf9
                isCompany: false
                migratedId: null,
                type: TENANT
                tenantId: 59f52305-00e0-4983-b5f1-43594b39b81f
        401:
          $ref: "#/components/responses/UnauthorizedError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

  /collection-engine/v1/{tenantId}/customers:
    post:
      tags:
        - Customers
      summary: Create new customer
      description: Create new customer allows the api consumer to create a customer related to a creditor
      operationId: create-customer
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant the case is being created for
        - in: query
          name: creditorId
          schema:
            type: string
          required: true
          description: Creditor id that the customer is related to
      requestBody:
        description: New customer object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCustomer"
            example:
              isCompany: false
              referenceId: "123"
              users:
                - contact: true
                  lang: da
                  relation: debtor
                  details:
                    name: Hans Hansen
                    email: example@debbie.dk
                    phone:
                      locale: "45"
                      number: "12345678"
                    address:
                      address: Applebys Plads 7, 1.
                      coAddress: null
                      city: København K
                      zipcode: "1411"
                    cpr: "1209981919"
                    cvr: null

        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerCreated"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

  /collection-engine/v1/{tenantId}/customers/{id}:
    get:
      tags:
        - Customers
      summary: Get a customer
      description: Get a customer by customer id
      operationId: get-customer
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant the case belongs to
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the customer to be retrieved
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCustomer"
              example:
                id: 123456
                customerId: 268b30d2-e895-42b9-8a38-2451a87e19b2
                isCompany: false
                referenceId: "123"
                users:
                  - contact: true
                    lang: en
                    relation: debtor
                    details:
                      name: Hans Hansen
                      email: email@example.com
                      phone:
                        locale: "45"
                        number: "12345678"
                      address:
                        address: Applebys Plads 7, 1.
                        coAddress: null
                        city: København K
                        zipcode: "1411"
                        country: Danmark
                cases:
                  - caseId: 268b30d2-e895-42b9-8a38-2451a87e19b2
                    status: PENDING
                    statusTime: 2022-04-19T07:30:21.070Z
                    exitReason: null
                    createdAt: 2022-04-19T07:30:21.070Z
        401:
          $ref: "#/components/responses/UnauthorizedError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

  /collection-engine/v1/{tenantId}/creditors:
    post:
      tags:
        - Creditors
      summary: Create new creditor
      description: Create new creditor allows the api consumer to create new creditors
      operationId: create-creditor
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant the creditor is being created for
      requestBody:
        description: New creditor object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCreditor"
            example:
              id: My reference
              name: John Doe's Factories
              centralRegisterId: DK40125949
              isCompany: true
              address:
                address: Applebys Pl. 7, 1.
                coAddress:
                city: København K
                zipcode: "1411"
                country: Danmark
              notes: Note to self (and my colleagues).
              erpLink: https://example.com?id={{customerReferenceId}}&test

              acquisitionResponsibleId: 9409b6d8-cde5-45f1-b8e1-e756847a7077
              contactId: bb71f936-c60c-4ad7-82f6-eddca673d30f
              caseworkerContactId: 9409b6d8-cde5-45f1-b8e1-e756847a7077

              defaultTenantWorkflowId: 3057ca58-d39d-48ec-9d79-c45182b92ca0
              state: ACTIVE
              vatRegistered: true
              aksEnabled: true
              bankAccountDetails:
                type: DANISH
                registrationNumber: "1234"
                accountNumber: "00012345678"
              selfCollection: false
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditorCreated"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          $ref: "#/components/responses/ConflictError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

  /collection-engine/v1/{tenantId}/creditors/{creditorId}:
    get:
      tags:
        - Creditors
      summary: Get creditor
      description: Get a creditor
      operationId: get-creditor
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant the creditor is related to
        - in: path
          name: creditorId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the creditor
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Creditor"
              example:
                acquisitionResponsibleId: 9409b6d8-cde5-45f1-b8e1-e756847a7077
                contactId: bb71f936-c60c-4ad7-82f6-eddca673d30f
                caseworkerContactId: 9409b6d8-cde5-45f1-b8e1-e756847a7077
                notes: Note to self (and my colleagues).
                name: John Doe's Factories
                defaultCollectorId: f6700acf-edf6-4ef7-8e39-fa5f45d20c0d
                defaultChainId: 3057ca58-d39d-48ec-9d79-c45182b92ca0
                aksEnabled: true
                vatRegistered: true
                centralRegisterId: DK40125949
                isCompany: true
                state: ACTIVE
                id: My reference
                selfCollection: false
                experianClientId: 125134
                creditorId: a087de99-19aa-4f40-9883-fa4b20f3dff1
                debtorFAQ: Frequently asked questions
                defaultClientChainId: 3057ca58-d39d-48ec-9d79-c45182b92ca0
                defaultConnectorId: 9860cf1a-b4d9-4d4e-a085-298c4781eca0
        401:
          $ref: "#/components/responses/UnauthorizedError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

    patch:
      tags:
        - Creditors
      summary: Patch creditor
      description: Patch a creditor
      operationId: patch-creditor
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant the creditor is related to
        - in: path
          name: creditorId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the creditor
      requestBody:
        description: Patch creditor object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchCreditor"
            example:
              acquisitionResponsibleId: 9409b6d8-cde5-45f1-b8e1-e756847a7077
              contactId: bb71f936-c60c-4ad7-82f6-eddca673d30f
              caseworkerContactId: 9409b6d8-cde5-45f1-b8e1-e756847a7077
              notes: Note to self (and my colleagues).
              name: John Doe's Factories
              defaultCollectorId: f6700acf-edf6-4ef7-8e39-fa5f45d20c0d
              defaultChainId: 3057ca58-d39d-48ec-9d79-c45182b92ca0
              aksEnabled: true
              vatRegistered: true
              centralRegisterId: DK40125949
              isCompany: true
              state: ACTIVE
              id: My reference
              selfCollection: false
              experianClientId: 125134
              creditorId: a087de99-19aa-4f40-9883-fa4b20f3dff1
              debtorFAQ: Frequently asked questions
              defaultClientChainId: 3057ca58-d39d-48ec-9d79-c45182b92ca0
              defaultConnectorId: 9860cf1a-b4d9-4d4e-a085-298c4781eca0
        required: true
      responses:
        200:
          description: Successful operation
          content: {}
        401:
          $ref: "#/components/responses/UnauthorizedError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

  /collection-engine/v1/{tenantId}/updates:
    post:
      tags:
        - Updates
      summary: Create new update
      description: Create new update allows the api consumer to create new updates
      operationId: create-update
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant the update is related to
      requestBody:
        description: New update object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUpdate"
            example:
              referenceId: 9409b6d8-cde5-45f1-b8e1-e756847a7077
              updateTypeId: a49c6124-fb23-4976-8400-9afd9018bc85
              update: Optional text to the users can be included here
              remindedAt: "2020-05-01 00:00:00.000+01"
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                example:
                  updateId: 56e93ac4-a89d-422a-b2da-5ed5a052477d
        401:
          $ref: "#/components/responses/UnauthorizedError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

  /collection-engine/v1/{tenantId}/updates/{updateId}:
    patch:
      tags:
        - Updates
      summary: Patch update
      description: Patch an existing update
      operationId: patch-update
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant the update is related to
        - in: path
          name: updateId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the update
      requestBody:
        description: Patch update object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchUpdate"
            example:
              continuedAt: "2020-05-01 00:00:00.000+01"
        required: true
      responses:
        200:
          description: Successful operation
          content: {}
        401:
          $ref: "#/components/responses/UnauthorizedError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

  /iam/{tenantId}/users:
    post:
      tags:
        - Users
      summary: Create new user
      description: Create a user
      operationId: create-user
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant
      requestBody:
        description: Create new user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
            example:
              email: john.doe123@example.com
              phone:
                locale: "45"
                number: "12345678"
              username: john.doe123@example.com
              firstName: John
              lastName: Doe
              role: client
              sendInvite: true
              emailPreferences:
                todoNotifications: true
              tenant:
                role: client
                scopes: []
              creditors:
                - id: 8275e7fa-c43b-4787-a61d-1815390f7686
                  scopes: []
        required: true
      responses:
        200:
          description: Successful operation
          content: {}
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          $ref: "#/components/responses/ConflictError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body
    get:
      tags:
        - Users
      summary: Get users
      description: Get all users on tenant
      operationId: get-users
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          $ref: "#/components/responses/ConflictError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

  /iam/{tenantId}/users/search:
    post:
      tags:
        - Users
      summary: Search users
      description: Search all users
      operationId: search-users
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant
        - in: query
          name: q
          schema:
            type: string
          required: true
          description: Your search query. For example the email of the user.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          $ref: "#/components/responses/ConflictError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

  /iam/{tenantId}/users/{userId}:
    get:
      tags:
        - Users
      summary: Get a user
      description: Get a single user
      operationId: get-user
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the user
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          $ref: "#/components/responses/ConflictError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body
    patch:
      tags:
        - Users
      summary: Patch a user
      description: Patch a single user
      operationId: patch-user
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the user
      requestBody:
        description: Patch user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchUser"
            example:
              phone:
                locale: "45"
                number: "12345678"
              email: john.doe@example.com
              firstName: John
              lastName: Doe
              emailPreferences:
                todoNotifications: true
              creditors:
                - id: 8275e7fa-c43b-4787-a61d-1815390f7686
                  scopes: []
        required: true
      responses:
        200:
          description: Successful operation
          content: {}
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          $ref: "#/components/responses/ConflictError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

  /v1/{tenantId}/case-vouchers/{caseId}:
    post:
      tags:
        - Case vouchers
      summary: Add voucher to case
      description: Add voucher to case
      operationId: add-case-voucher
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant
        - in: path
          name: caseId
          schema:
            type: string
          required: true
          description: Case id
      requestBody:
        description: New case voucher object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCaseVoucher"
            example:
              currency: DKK
              amount: 100000
              referenceId: D12412347
              text: J.no. 1234
              date: "2020-05-28 00:00:00.000+01"
              source: "CREDITOR"
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewCaseVoucherResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          $ref: "#/components/responses/ConflictError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

  /collection-engine/v1/{tenantId}/links/{creditorId}/{caseReferenceId}/debtor-web:
    get:
      tags:
        - Links
      summary: Debtor web link
      description: Generate a link to get access to the debtor web
      operationId: links-debtor-web
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant
        - in: path
          name: creditorId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the creditor
        - in: path
          name: caseReferenceId
          schema:
            type: string
          required: true
          description: Reference id of the case
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          $ref: "#/components/responses/ConflictError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

  /collection-engine/v1/{tenantId}/links/{creditorId}/{caseReferenceId}/payment-plan:
    get:
      tags:
        - Links
      summary: Payment plan link
      description: Generate a link to get access to the payment plan creation
      operationId: links-payment-plan
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant
        - in: path
          name: creditorId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the creditor
        - in: path
          name: caseReferenceId
          schema:
            type: string
          required: true
          description: Reference id of the case
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          $ref: "#/components/responses/ConflictError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

  /collection-engine/v1/{tenantId}/links/{creditorId}/{caseReferenceId}/payment:
    get:
      tags:
        - Links
      summary: Payment link
      description: Generate a link to get access to the payment page from your PSP
      operationId: links-payment
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant
        - in: path
          name: creditorId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the creditor
        - in: path
          name: caseReferenceId
          schema:
            type: string
          required: true
          description: Reference id of the case
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          $ref: "#/components/responses/ConflictError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

  /v1/{tenantId}/files:
    post:
      tags:
        - Files
      summary: Upload file
      description: Upload file allows the api consumer to upload files
      operationId: create-file
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant the file is being created for
      requestBody:
        description: New file object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewFile"
            example:
              content: "Base64 encoded file content"
              contentType: "application/pdf"
              name: "file.pdf"

        required: true
      responses:
        200:
          description: Successful operation
          content: {}
        401:
          $ref: "#/components/responses/UnauthorizedError"
        422:
          $ref: "#/components/responses/UnprocessableContent"
      x-codegen-request-body-name: body

  /files/{fileId}/{fileName}:
    get:
      tags:
        - Files
      summary: Get file
      description: Get file by fileId
      operationId: get-file
      parameters:
        - in: path
          name: fileId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the file
        - in: path
          name: fileName
          schema:
            type: string
          required: true
          description: Name of the file. Can be anything and can also be omitted
      responses:
        200:
          description: Successful operation
          content: {}
      x-codegen-request-body-name: body

components:
  schemas:
    EmptyObject:
      type: object

    Permissions:
      type: object
      properties:
        scopes:
          type: array
          items:
            type: string

    NewFile:
      type: object
      properties:
        content:
          type: string
          description: Base64 encoded file content
        contentType:
          type: string
          description: The content type of the file
        name:
          type: string
          description: The name of the file
      required:
        - content
        - contentType

    Address:
      type: object
      properties:
        address:
          type: string
          description: The street name and number of the address
        coAddress:
          type: string
        zipcode:
          type: string
        city:
          type: string
        country:
          type: string
      required:
        - address
        - zipcode
        - city

    BankAccountDetails:
      type: object
      properties:
        type:
          type: string
          enum: [DANISH]
          description: Type of bank account details
        registrationNumber:
          type: string
        accountNumber:
          type: string
      required:
        - type
        - registrationNumber
        - accountNumber

    NewProperty:
      type: object
      properties:
        handle:
          type: string
        data:
          type: object
          properties:
            text:
              type: string
      required:
        - handle
        - data

    NewVoucherFile:
      type: object
      properties:
        fileName:
          type: string
        contentType:
          type: string
        fileId:
          type: string
          format: uuid
      required:
        - fileName
        - contentType
        - fileId

    NewCaseVoucher:
      type: object
      properties:
        voucherTypeId:
          type: string
          format: uuid
          description: An id for the voucher type. A list of ids can be found in the Voucher Type Ids chapter.
        amount:
          type: integer
          description: Amount in base currency. For example 1€ should be sent as 100.
        referenceId:
          type: string
        currency:
          type: string
          enum: [DKK, SEK, NOK, USD, EUR, GBP, CHF]
        interest:
          type: number
          description: Used when the voucher is yearly interest to specify the interest rate. The number is in decimal, for example 0.1 would be an interest rate of 10%.
        date:
          type: string
        interestStartDate:
          type: string
        interestEndDate:
          type: string
        dueDate:
          type: string
        appendix:
          $ref: "#/components/schemas/NewVoucherFile"
          description: The appendix is for pdf copies or similar for a voucher.
        source:
          type: string
          enum: [CREDITOR, COLLECTOR]
          description: The source of the voucher
        referenceCaseVoucherId:
          type: string
          format: uuid
          description: The id of the voucher that this voucher is a child of.
        referenceVouchers:
          type: array
          items:
            $ref: "#/components/schemas/NewCaseVoucher"
      required:
        - voucherTypeId
        - amount
        - date
        - source
        - currency

    NewCase:
      type: object
      properties:
        creditorId:
          type: string
          format: uuid
          description: Id of the creditor which the case belongs to
        customerId:
          type: string
          format: uuid
          description: Id of the customer which the case belongs to
        migratedId:
          type: string
        currency:
          type: string
          enum: [DKK, SEK, NOK, USD, EUR, GBP, CHF]
          description: Currency
        isCompany:
          type: boolean
          description: Is the case a company
        caseVouchers:
          type: array
          items:
            $ref: "#/components/schemas/NewCaseVoucher"
        properties:
          type: array
          items:
            $ref: "#/components/schemas/NewProperty"
      required:
        - creditorId
        - isCompany
        - customerId
        - vouchers

    CaseCreated:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Id of the case
        caseSeqId:
          type: number
          description: Debbies sequential id of the case
      required:
        - id
        - caseSeqId

    NewCustomer:
      type: object
      properties:
        isCompany:
          type: boolean
          description: Is the customer a company
        referenceId:
          type: string
          description: Creditors' reference id for the customer
        users:
          type: array
          items:
            type: object
            properties:
              contact:
                type: boolean
                description: If the user should be the contact person on cases
              lang:
                $ref: "#/components/schemas/Language"
                description: The language of the debtor
              relation:
                type: string
                enum: ["debtor", "alternative-contact"]
                description: User relation to customer
              details:
                type: object
                properties:
                  name:
                    type: string
                    description: Name of the user
                  cpr:
                    type: string
                    description: The cpr number of a user, only used when user is a person.
                  cvr:
                    type: string
                    description: The cvr number of a user, only used when user is a company.
                  email:
                    type: string
                    description: The email of the user
                  phone:
                    type: object
                    description: The users' phone number with locale
                    properties:
                      number:
                        type: string
                        description: The users' phone number. For example 12345678.
                      locale:
                        type: string
                        description: The users' phone locale. For example 45.
                  address:
                    $ref: "#/components/schemas/Address"
                    description: The debtors address
                required:
                  - name
            required:
              - relation
              - lang
      required:
        - isCompany
        - users
        - referenceId
    UpdateCase:
      type: object
      properties:
        status:
          type: string
          enum: ["VERIFIED", "ENDED"]
          description: The updated status of the case
        reason:
          type: string
          enum:
            [
              "ERROR_US",
              "WITHDRAWN",
              "ERROR_CREDITOR",
              "DEAD",
              "BANKRUPTCY",
              "OBJECTION",
              "PAID",
              "PARTIALLY_PAID",
              "OVERPAYMENT",
              "EXPIRATION",
              "IRRECOVERABLE",
              "TRANSFERRED",
              "UNIDENTIFIED",
              "OFFER_FROM_US",
              "OFFER_FROM_DEBTOR",
              "FORCED_DISSOLVED",
              "NEGATIVE_PAYOFF",
              "DEPARTED",
              "CREDITOR_UNRESPONSIVE",
              "MERGED",
              "FIRE_AND_FORGET",
              "SMALL_CASE_NOT_WANTED",
              "ADDRESS_UNKNOWN",
              "DEBT_RELIEF",
              "CONFLICT_OF_INTEREST",
              "MINOR",
              "NO_DEBT",
              "DELETED",
            ]
          description: Used to provide a reason when the status is changed to ended
        isCompany:
          type: boolean
          description: Used to indicate whether the entity is a company (true) or private (false)

    GetCase:
      type: object
      properties:
        status:
          type: string
          enum: ["PENDING", "VERIFIED", "ENDED"]
          description: The case status
        exitReason:
          $ref: "#/components/schemas/CaseEndReason"
        id:
          type: number
          enum: ["PENDING", "VERIFIED", "ENDED"]
          description: Case sequential id
        caseId:
          type: string
          format: uuid
          description: Id of case
        creditorId:
          type: string
          format: uuid
          description: Id of creditor
        statusTime:
          type: string
          description: Time og last status change
        createdAt:
          type: string
          description: Case created at
        customerId:
          type: string
          format: uuid
          description: Id of the customer related to the case
        tenantId:
          type: string
          format: uuid
          description: Id of the tenant
        migratedId:
          type: string
          description: Id from last system if the case is migrated

    GetCustomer:
      type: object
      properties:
        creditorId:
          type: string
          format: uuid
          description: Id of creditor
        createdAt:
          type: string
          description: Customer created at
        customerId:
          type: string
          format: uuid
          description: Id of the customer
        tenantId:
          type: string
          format: uuid
          description: Id of the tenant
        referenceId:
          type: string
          description: Reference id of the customer. Typically id of the customer, client, patient or similar.
        isCompany:
          type: boolean
          description: Whether the customer is a company.
        users:
          type: array
          description: List of users related to this customer
          items:
            $ref: "#/components/schemas/UserOnCustomer"
        cases:
          type: array
          description: List of cases related to this customer
          items:
            $ref: "#/components/schemas/CaseOnCustomer"

    CaseOnCustomer:
      type: object
      properties:
        caseId:
          type: string
          format: uuid
          description: Id of the case
        id:
          type: number
          description: Sequential id of the case
        status:
          type: string
          enum: ["PENDING", "VERIFIED", "ENDED"]
          description: Status of the case
        endReason:
          $ref: "#/components/schemas/CaseEndReason"
        statusTime:
          type: string
          description: Case status changed at
        createdAt:
          type: string
          description: Case created at

    UserOnCustomer:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          description: Id of the user
        id:
          type: number
          description: Sequential id of the user
        relation:
          type: string
          enum: ["debtor", "alternative-contact"]
          description: Type of relation to the customer
        contact:
          type: boolean
          description: Whether the user is the contact person
        customerId:
          type: string
          format: uuid
          description: Id of the customer
        lang:
          $ref: "#/components/schemas/Language"
          description: The language of the user
        details:
          type: object
          properties:
            name:
              type: string
              description: Name of the user
            cpr:
              type: string
              description: The cpr number of a user, only used when user is a person.
            cvr:
              type: string
              description: The cvr number of a user, only used when user is a company.
            email:
              type: string
              description: The email of the user
            phone:
              type: object
              description: The users' phone number with locale
              properties:
                number:
                  type: string
                  description: The users' phone number. For example 12345678.
                locale:
                  type: string
                  description: The users' phone locale. For example 45.
            address:
              $ref: "#/components/schemas/Address"
              description: The debtors address
            geocode:
              type: object
              properties:
                latitude:
                  type: number
                longitude:
                  type: number

    NewCreditor:
      type: object
      properties:
        id:
          type: string
          description: Id from your internal systems. For example your ERP creditor id.
        name:
          type: string
          description: Name of the creditor.
        centralRegisterId:
          type: string
          description: Central register id. For example "DK40125949"
        isCompany:
          type: boolean
          description: Whether the creditor is a company.
        address:
          $ref: "#/components/schemas/Address"
          description: The creditors' address
        notes:
          type: string
          description: Creditor notes.
        erpLink:
          type: string
          description: Link to creditors' ERP system ( https://example.com?id={{customerReferenceId}}&test ).
        acquisitionResponsibleId:
          type: string
          format: uuid
          description: Id of the user who is responsible for the acquisition of the creditor.
        contactId:
          type: string
          format: uuid
          description: Id of the client user who is case responsible.
        caseworkerContactId:
          type: string
          format: uuid
          description: Id of the caseworker user who is case responsible.
        defaultTenantWorkflowId:
          type: string
          format: uuid
          description: Id of the default workflow.
        state:
          type: string
          enum: [LEAD, SIGNED_ON, ACTIVE, CANCELLED, CEASED]
          description: The state of the creditor
        vatRegistered:
          type: boolean
          description: Whether the creditor is vat registered or not.
        aksEnabled:
          type: boolean
          description: Whether Experian AKS is enabled or not.
        bankAccountDetails:
          $ref: "#/components/schemas/BankAccountDetails"
          description: The creditors' bank account
        selfCollection:
          type: boolean
          description: Whether the creditor is collecting for themselves or not.
      required:
        - name
        - isCompany

    CreditorCreated:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Id of the creditor
        reference:
          type: string
          description: Id from your internal systems. For example your ERP creditor id.
      required:
        - id
        - reference

    CustomerCreated:
      type: object
      properties:
        customerId:
          type: string
          format: uuid
          description: Id of the customer
      required:
        - customerId

    PatchCreditor:
      type: object
      properties:
        address:
          $ref: "#/components/schemas/Address"
          description: The creditors' address
        referenceId:
          type: string
          format: uuid
          description: Id of the client user who is case responsible.
        contactId:
          type: string
          format: uuid
          description: Id of the client user who is case responsible.
        acquisitionResponsibleId:
          type: string
          format: uuid
          description: Id of the client user who is case responsible.
        caseworkerContactId:
          type: string
          format: uuid
          description: Id of the caseworker user who is case responsible.
        notes:
          type: string
          description: Creditor notes.
        erpLink:
          type: string
          description: Link to creditors' ERP system ( https://example.com?id={{customerReferenceId}}&test ).
        name:
          type: string
          description: Name of the creditor.
        defaultCollectorId:
          type: string
          format: uuid
          description: Id of the default collector.
        defaultTenantWorkflowId:
          type: string
          format: uuid
          description: Id of the default workflow.
        defaultConnectorId:
          type: string
          format: uuid
          description: Id of the default billing model.
        experianClientId:
          type: integer
          description: Experian client id.
        debtorFAQ:
          type: string
          description: Frequently asked questions (shown in debtor web).
        aksEnabled:
          type: boolean
          description: Whether Experian AKS is enabled or not.
        vatRegistered:
          type: boolean
          description: Whether the creditor is vat registered or not.
        isCompany:
          type: boolean
          description: Whether the creditor is a company.
        selfCollection:
          type: boolean
          description: Whether the creditor is collecting for themselves or not.
        centralRegisterId:
          type: string
          description: Central register id. For example "DK40125949"
        state:
          type: string
          enum: [LEAD, SIGNED_ON, ACTIVE, CANCELLED, CEASED]
          description: The state of the creditor

    Creditor:
      type: object
      properties:
        acquisitionResponsibleId:
          type: string
          format: uuid
          description: Id of the user who is responsible for the acquisition of the creditor.
        contactId:
          type: string
          format: uuid
          description: Id of the client user who is case responsible.
        caseworkerContactId:
          type: string
          format: uuid
          description: Id of the caseworker user who is case responsible.
        aksEnabled:
          type: boolean
          description: Whether Experian AKS is enabled or not.
        centralRegisterId:
          type: string
          format: uuid
          description: Central register id. For example "DK40125949".
        creditorId:
          type: string
          format: uuid
          description: Id for the Creditor.
        debtorFAQ:
          type: string
          description: A FAQ for the debtor web.
        defaultTenantWorkflowId:
          type: string
          format: uuid
          description: Id of the default workflow.
        defaultCollectorId:
          type: string
          format: uuid
          description: Id of the default collector.
        defaultConnectorId:
          type: string
          format: uuid
          description: Id for the default connector.
        experianClientId:
          type: string
          description: Experian client identifier.
        id:
          type: string
          description: Id for your internal systems. For example your ERP creditor id.
        isCompany:
          type: boolean
          description: Whether the creditor is a company.
        name:
          type: string
          description: Name of the creditor.
        notes:
          type: string
          description: Creditor notes.
        selfCollection:
          type: boolean
          description: Whether the creditor is collecting for themselves or not.
        state:
          type: string
          enum: [LEAD, SIGNED_ON, ACTIVE, CANCELLED, CEASED]
          description: The state of the creditor
        vatRegistered:
          type: string
          format: uuid
          description: Whether the creditor is vat registered or not.

    NewUpdate:
      type: object
      properties:
        referenceId:
          type: string
          format: uuid
          description: The updates' reference. Typically a caseId.
        updateTypeId:
          type: string
          format: uuid
          description: The id of the type. An overview of type id's can be found under settings in Debbie Caseworker.
        update:
          type: string
          description: A note attached to the update.
        remindedAt:
          type: string
          description: When should the user get notified about the update? Defaults to now.
        pausedAt:
          type: string
          description: When should the case be paused? Defaults to now.
        continuedAt:
          type: string
          description: When should the update be continued? Default to null.
      required:
        - referenceId
        - updateTypeId

    PatchUpdate:
      type: object
      properties:
        continuedAt:
          type: string
          description: Date where the update should be continued

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The users' email. The email should be unique.
        email:
          type: string
          description: The users' email. The email should be unique.
        username:
          type: string
          description: The users' username. The username should be unique. You can use the email.
        firstName:
          type: string
          description: The users' first name.
        lastName:
          type: string
          description: The users' last name.
        role:
          type: string
          enum: [client, caseworker, admin]
          description: The users' role.
        sendInvite:
          type: boolean
          description: Wether or not to send an invite to the user.
        emailPreferences:
          type: object
          description: Email preferences
          properties:
            todoNotifications:
              type: boolean
              description: Enable or disable todo notifications
        tenant:
          type: object
          description: Define the relation to the tenant.
          properties:
            role:
              type: string
              enum: [client, caseworker, admin]
              description: The users' role.
            scopes:
              type: array
              description: Array of scopes.
              items:
                type: string
        creditors:
          type: object
          description: Define relations to creditors.
          properties:
            id:
              type: string
              format: uuid
              description: Creditor id.
            scopes:
              type: array
              description: Array of scopes.
              items:
                type: string
        phone:
          type: object
          description: The users' phone number with locale
          properties:
            number:
              type: string
              description: The users' phone number. For example 12345678.
            locale:
              type: string
              description: The users' phone locale. For example 45.

    NewUser:
      type: object
      properties:
        email:
          type: string
          description: The users' email. The email should be unique.
        username:
          type: string
          description: The users' username. The username should be unique. You can use the email.
        firstName:
          type: string
          description: The users' first name.
        lastName:
          type: string
          description: The users' last name.
        role:
          type: string
          enum: [client, caseworker, admin]
          description: The users' role.
        sendInvite:
          type: boolean
          description: Wether or not to send an invite to the user.
        emailPreferences:
          type: object
          description: Email preferences
          properties:
            todoNotifications:
              type: boolean
              description: Enable or disable todo notifications
        tenant:
          type: object
          description: Define the relation to the tenant.
          properties:
            role:
              type: string
              enum: [client, caseworker, admin]
              description: The users' role.
            scopes:
              type: array
              description: Array of scopes.
              items:
                type: string
        creditors:
          type: object
          description: Define relations to creditors.
          properties:
            id:
              type: string
              format: uuid
              description: Creditor id.
            scopes:
              type: array
              description: Array of scopes.
              items:
                type: string
        phone:
          type: object
          description: The users' phone number with locale
          properties:
            number:
              type: string
              description: The users' phone number. For example 12345678.
            locale:
              type: string
              description: The users' phone locale. For example 45.
      required:
        - email
        - username
        - firstName
        - lastName
        - role
        - tenant
        - creditors

    PatchUser:
      type: object
      properties:
        email:
          type: string
          description: The users' email. The email should be unique.
        firstName:
          type: string
          description: The users' first name.
        lastName:
          type: string
          description: The users' last name.
        emailPreferences:
          type: object
          description: Email preferences
          properties:
            todoNotifications:
              type: boolean
              description: Enable or disable todo notifications
        creditors:
          type: object
          description: Define relations to creditors.
          properties:
            id:
              type: string
              format: uuid
              description: Creditor id.
            scopes:
              type: array
              description: Array of scopes.
              items:
                type: string
        phone:
          type: object
          description: The users' phone number with locale
          properties:
            number:
              type: string
              description: The users' phone number. For example 12345678.
            locale:
              type: string
              description: The users' phone locale. For example 45.

    Language:
      type: string
      enum:
        [
          bm,
          ba,
          eu,
          be,
          bn,
          bh,
          bi,
          bs,
          br,
          bg,
          my,
          ca,
          ch,
          ce,
          ny,
          zh,
          cv,
          kw,
          co,
          cr,
          hr,
          cs,
          da,
          dv,
          nl,
          dz,
          en,
          eo,
          et,
          ee,
          fo,
          fj,
          fi,
          fr,
          ff,
          gl,
          ka,
          de,
          el,
          gn,
          gu,
          ht,
          ha,
          he,
          hz,
          hi,
          ho,
          hu,
          ia,
          id,
          ie,
          ga,
          ig,
          ik,
          io,
          is,
          it,
          iu,
          ja,
          jv,
          kl,
          kn,
          kr,
          ks,
          kk,
          km,
          ki,
          rw,
          ky,
          kv,
          kg,
          ko,
          ku,
          kj,
          la,
          lb,
          lg,
          li,
          ln,
          lo,
          lt,
          lu,
          lv,
          gv,
          mk,
          mg,
          ms,
          ml,
          mt,
          mi,
          mr,
          mh,
          mn,
          na,
          nv,
          nd,
          ne,
          ng,
          nb,
          nn,
          no,
          ii,
          nr,
          oc,
          oj,
          cu,
          om,
          or,
          os,
          pa,
          pi,
          fa,
          pl,
          ps,
          pt,
          qu,
          rm,
          rn,
          ro,
          ru,
          sa,
          sc,
          sd,
          se,
          sm,
          sg,
          sr,
          gd,
          sn,
          si,
          sk,
          sl,
          so,
          st,
          es,
          su,
          sw,
          ss,
          sv,
          ta,
          te,
          tg,
          th,
          ti,
          bo,
          tk,
          tl,
          tn,
          to,
          tr,
          ts,
          tt,
          tw,
          ty,
          ug,
          uk,
          ur,
          uz,
          ve,
          vi,
          vo,
          wa,
          cy,
          wo,
          fy,
          xh,
          yi,
          yo,
          za,
          zu,
        ]
      description: Language.

    CaseEndReason:
      nullable: true
      type: string
      enum:
        [
          "PAID",
          "OVERPAYMENT",
          "PARTIALLY_PAID",
          "DEAD",
          "BANKRUPTCY",
          "OBJECTION",
          "ERROR_CREDITOR",
          "ERROR_US",
          "WITHDRAWN",
          "EXPIRATION",
          "IRRECOVERABLE",
          "TRANSFERRED",
          "NO_COURT",
          "UNIDENTIFIED",
          "OFFER_FROM_US",
          "OFFER_FROM_DEBTOR",
          "FORCED_DISSOLVED",
          "NEGATIVE_PAYOFF",
          "DEPARTED",
          "CREDITOR_UNRESPONSIVE",
          "MERGED",
          "FIRE_AND_FORGET",
          "SMALL_CASE_NOT_WANTED",
          "ADDRESS_UNKNOWN",
          "DEBT_RELIEF",
          "CONFLICT_OF_INTEREST",
          "MINOR",
          "DELETED",
          "NO_DEBT",
        ]
      description: Reason why the case is ended

    NewCaseVoucherResponse:
      type: object

    LinkResponse:
      type: object
      properties:
        url:
          type: string
          description: Link to the site

  responses:
    UnauthorizedError:
      description: Access token missing or invalid
    UnprocessableContent:
      description: Unable to process the contained instructions.
    ConflictError:
      description: Conflict

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description:
        "Authentication with an API key kan be done by using a bearer token
        in the Authorization header. This is done using the following format 'Authorization:
        Bearer {token}'. The API token can both be issued and revoked directly from the platform. Please go to Settings → Developers → API. Name the API token and associate your needed scopes."

security:
  - bearerAuth: []
